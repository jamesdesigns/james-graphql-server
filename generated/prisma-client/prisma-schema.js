module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Aggregatelaunch {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type launch {
  id: ID!
  mission: String!
  details: String!
  Imagelink: String!
  price: Float!
}

type launchConnection {
  pageInfo: PageInfo!
  edges: [launchEdge]!
  aggregate: Aggregatelaunch!
}

input launchCreateInput {
  mission: String!
  details: String!
  Imagelink: String!
  price: Float!
}

type launchEdge {
  node: launch!
  cursor: String!
}

enum launchOrderByInput {
  id_ASC
  id_DESC
  mission_ASC
  mission_DESC
  details_ASC
  details_DESC
  Imagelink_ASC
  Imagelink_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type launchPreviousValues {
  id: ID!
  mission: String!
  details: String!
  Imagelink: String!
  price: Float!
}

type launchSubscriptionPayload {
  mutation: MutationType!
  node: launch
  updatedFields: [String!]
  previousValues: launchPreviousValues
}

input launchSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: launchWhereInput
  AND: [launchSubscriptionWhereInput!]
  OR: [launchSubscriptionWhereInput!]
  NOT: [launchSubscriptionWhereInput!]
}

input launchUpdateInput {
  mission: String
  details: String
  Imagelink: String
  price: Float
}

input launchUpdateManyMutationInput {
  mission: String
  details: String
  Imagelink: String
  price: Float
}

input launchWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mission: String
  mission_not: String
  mission_in: [String!]
  mission_not_in: [String!]
  mission_lt: String
  mission_lte: String
  mission_gt: String
  mission_gte: String
  mission_contains: String
  mission_not_contains: String
  mission_starts_with: String
  mission_not_starts_with: String
  mission_ends_with: String
  mission_not_ends_with: String
  details: String
  details_not: String
  details_in: [String!]
  details_not_in: [String!]
  details_lt: String
  details_lte: String
  details_gt: String
  details_gte: String
  details_contains: String
  details_not_contains: String
  details_starts_with: String
  details_not_starts_with: String
  details_ends_with: String
  details_not_ends_with: String
  Imagelink: String
  Imagelink_not: String
  Imagelink_in: [String!]
  Imagelink_not_in: [String!]
  Imagelink_lt: String
  Imagelink_lte: String
  Imagelink_gt: String
  Imagelink_gte: String
  Imagelink_contains: String
  Imagelink_not_contains: String
  Imagelink_starts_with: String
  Imagelink_not_starts_with: String
  Imagelink_ends_with: String
  Imagelink_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  AND: [launchWhereInput!]
  OR: [launchWhereInput!]
  NOT: [launchWhereInput!]
}

input launchWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createlaunch(data: launchCreateInput!): launch!
  updatelaunch(data: launchUpdateInput!, where: launchWhereUniqueInput!): launch
  updateManylaunches(data: launchUpdateManyMutationInput!, where: launchWhereInput): BatchPayload!
  upsertlaunch(where: launchWhereUniqueInput!, create: launchCreateInput!, update: launchUpdateInput!): launch!
  deletelaunch(where: launchWhereUniqueInput!): launch
  deleteManylaunches(where: launchWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  name: String!
  price: Float
  color: String!
  size: String!
  imagelink: String!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  name: String!
  price: Float
  color: String!
  size: String!
  imagelink: String!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  color_ASC
  color_DESC
  size_ASC
  size_DESC
  imagelink_ASC
  imagelink_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  price: Float
  color: String!
  size: String!
  imagelink: String!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  price: Float
  color: String
  size: String
  imagelink: String
}

input ProductUpdateManyMutationInput {
  name: String
  price: Float
  color: String
  size: String
  imagelink: String
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  size: String
  size_not: String
  size_in: [String!]
  size_not_in: [String!]
  size_lt: String
  size_lte: String
  size_gt: String
  size_gte: String
  size_contains: String
  size_not_contains: String
  size_starts_with: String
  size_not_starts_with: String
  size_ends_with: String
  size_not_ends_with: String
  imagelink: String
  imagelink_not: String
  imagelink_in: [String!]
  imagelink_not_in: [String!]
  imagelink_lt: String
  imagelink_lte: String
  imagelink_gt: String
  imagelink_gte: String
  imagelink_contains: String
  imagelink_not_contains: String
  imagelink_starts_with: String
  imagelink_not_starts_with: String
  imagelink_ends_with: String
  imagelink_not_ends_with: String
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  launch(where: launchWhereUniqueInput!): launch
  launches(where: launchWhereInput, orderBy: launchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [launch]!
  launchesConnection(where: launchWhereInput, orderBy: launchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): launchConnection!
  node(id: ID!): Node
}

type Subscription {
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  launch(where: launchSubscriptionWhereInput): launchSubscriptionPayload
}
`
      }
    