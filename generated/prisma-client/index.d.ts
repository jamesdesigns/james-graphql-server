// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  product: (where?: ProductWhereInput) => Promise<boolean>;
  launch: (where?: launchWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  launch: (where: launchWhereUniqueInput) => launchPromise;
  launches: (
    args?: {
      where?: launchWhereInput;
      orderBy?: launchOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<launch>;
  launchesConnection: (
    args?: {
      where?: launchWhereInput;
      orderBy?: launchOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => launchConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createlaunch: (data: launchCreateInput) => launchPromise;
  updatelaunch: (
    args: { data: launchUpdateInput; where: launchWhereUniqueInput }
  ) => launchPromise;
  updateManylaunches: (
    args: { data: launchUpdateManyMutationInput; where?: launchWhereInput }
  ) => BatchPayloadPromise;
  upsertlaunch: (
    args: {
      where: launchWhereUniqueInput;
      create: launchCreateInput;
      update: launchUpdateInput;
    }
  ) => launchPromise;
  deletelaunch: (where: launchWhereUniqueInput) => launchPromise;
  deleteManylaunches: (where?: launchWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  launch: (
    where?: launchSubscriptionWhereInput
  ) => launchSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "color_ASC"
  | "color_DESC"
  | "size_ASC"
  | "size_DESC"
  | "imagelink_ASC"
  | "imagelink_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type launchOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "mission_ASC"
  | "mission_DESC"
  | "details_ASC"
  | "details_DESC"
  | "Imagelink_ASC"
  | "Imagelink_DESC"
  | "price_ASC"
  | "price_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  color?: String;
  color_not?: String;
  color_in?: String[] | String;
  color_not_in?: String[] | String;
  color_lt?: String;
  color_lte?: String;
  color_gt?: String;
  color_gte?: String;
  color_contains?: String;
  color_not_contains?: String;
  color_starts_with?: String;
  color_not_starts_with?: String;
  color_ends_with?: String;
  color_not_ends_with?: String;
  size?: String;
  size_not?: String;
  size_in?: String[] | String;
  size_not_in?: String[] | String;
  size_lt?: String;
  size_lte?: String;
  size_gt?: String;
  size_gte?: String;
  size_contains?: String;
  size_not_contains?: String;
  size_starts_with?: String;
  size_not_starts_with?: String;
  size_ends_with?: String;
  size_not_ends_with?: String;
  imagelink?: String;
  imagelink_not?: String;
  imagelink_in?: String[] | String;
  imagelink_not_in?: String[] | String;
  imagelink_lt?: String;
  imagelink_lte?: String;
  imagelink_gt?: String;
  imagelink_gte?: String;
  imagelink_contains?: String;
  imagelink_not_contains?: String;
  imagelink_starts_with?: String;
  imagelink_not_starts_with?: String;
  imagelink_ends_with?: String;
  imagelink_not_ends_with?: String;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export type launchWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface launchWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  mission?: String;
  mission_not?: String;
  mission_in?: String[] | String;
  mission_not_in?: String[] | String;
  mission_lt?: String;
  mission_lte?: String;
  mission_gt?: String;
  mission_gte?: String;
  mission_contains?: String;
  mission_not_contains?: String;
  mission_starts_with?: String;
  mission_not_starts_with?: String;
  mission_ends_with?: String;
  mission_not_ends_with?: String;
  details?: String;
  details_not?: String;
  details_in?: String[] | String;
  details_not_in?: String[] | String;
  details_lt?: String;
  details_lte?: String;
  details_gt?: String;
  details_gte?: String;
  details_contains?: String;
  details_not_contains?: String;
  details_starts_with?: String;
  details_not_starts_with?: String;
  details_ends_with?: String;
  details_not_ends_with?: String;
  Imagelink?: String;
  Imagelink_not?: String;
  Imagelink_in?: String[] | String;
  Imagelink_not_in?: String[] | String;
  Imagelink_lt?: String;
  Imagelink_lte?: String;
  Imagelink_gt?: String;
  Imagelink_gte?: String;
  Imagelink_contains?: String;
  Imagelink_not_contains?: String;
  Imagelink_starts_with?: String;
  Imagelink_not_starts_with?: String;
  Imagelink_ends_with?: String;
  Imagelink_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  AND?: launchWhereInput[] | launchWhereInput;
  OR?: launchWhereInput[] | launchWhereInput;
  NOT?: launchWhereInput[] | launchWhereInput;
}

export interface ProductCreateInput {
  name: String;
  price: Float;
  color: String;
  size: String;
  imagelink: String;
}

export interface ProductUpdateInput {
  name?: String;
  price?: Float;
  color?: String;
  size?: String;
  imagelink?: String;
}

export interface ProductUpdateManyMutationInput {
  name?: String;
  price?: Float;
  color?: String;
  size?: String;
  imagelink?: String;
}

export interface launchCreateInput {
  mission: String;
  details: String;
  Imagelink: String;
  price: Float;
}

export interface launchUpdateInput {
  mission?: String;
  details?: String;
  Imagelink?: String;
  price?: Float;
}

export interface launchUpdateManyMutationInput {
  mission?: String;
  details?: String;
  Imagelink?: String;
  price?: Float;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface launchSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: launchWhereInput;
  AND?: launchSubscriptionWhereInput[] | launchSubscriptionWhereInput;
  OR?: launchSubscriptionWhereInput[] | launchSubscriptionWhereInput;
  NOT?: launchSubscriptionWhereInput[] | launchSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Product {
  id: ID_Output;
  name: String;
  price: Float;
  color: String;
  size: String;
  imagelink: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  color: () => Promise<String>;
  size: () => Promise<String>;
  imagelink: () => Promise<String>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  color: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<String>>;
  imagelink: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface launch {
  id: ID_Output;
  mission: String;
  details: String;
  Imagelink: String;
  price: Float;
}

export interface launchPromise extends Promise<launch>, Fragmentable {
  id: () => Promise<ID_Output>;
  mission: () => Promise<String>;
  details: () => Promise<String>;
  Imagelink: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface launchSubscription
  extends Promise<AsyncIterator<launch>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mission: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  Imagelink: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface launchConnection {
  pageInfo: PageInfo;
  edges: launchEdge[];
}

export interface launchConnectionPromise
  extends Promise<launchConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<launchEdge>>() => T;
  aggregate: <T = AggregatelaunchPromise>() => T;
}

export interface launchConnectionSubscription
  extends Promise<AsyncIterator<launchConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<launchEdgeSubscription>>>() => T;
  aggregate: <T = AggregatelaunchSubscription>() => T;
}

export interface launchEdge {
  node: launch;
  cursor: String;
}

export interface launchEdgePromise extends Promise<launchEdge>, Fragmentable {
  node: <T = launchPromise>() => T;
  cursor: () => Promise<String>;
}

export interface launchEdgeSubscription
  extends Promise<AsyncIterator<launchEdge>>,
    Fragmentable {
  node: <T = launchSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregatelaunch {
  count: Int;
}

export interface AggregatelaunchPromise
  extends Promise<Aggregatelaunch>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatelaunchSubscription
  extends Promise<AsyncIterator<Aggregatelaunch>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  price: Float;
  color: String;
  size: String;
  imagelink: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  color: () => Promise<String>;
  size: () => Promise<String>;
  imagelink: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  color: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<String>>;
  imagelink: () => Promise<AsyncIterator<String>>;
}

export interface launchSubscriptionPayload {
  mutation: MutationType;
  node: launch;
  updatedFields: String[];
  previousValues: launchPreviousValues;
}

export interface launchSubscriptionPayloadPromise
  extends Promise<launchSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = launchPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = launchPreviousValuesPromise>() => T;
}

export interface launchSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<launchSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = launchSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = launchPreviousValuesSubscription>() => T;
}

export interface launchPreviousValues {
  id: ID_Output;
  mission: String;
  details: String;
  Imagelink: String;
  price: Float;
}

export interface launchPreviousValuesPromise
  extends Promise<launchPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  mission: () => Promise<String>;
  details: () => Promise<String>;
  Imagelink: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface launchPreviousValuesSubscription
  extends Promise<AsyncIterator<launchPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mission: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  Imagelink: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Product",
    embedded: false
  },
  {
    name: "launch",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
