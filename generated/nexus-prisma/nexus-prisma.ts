/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Product: ProductObject
      ProductConnection: ProductConnectionObject
      PageInfo: PageInfoObject
      ProductEdge: ProductEdgeObject
      AggregateProduct: AggregateProductObject
      launch: launchObject
      launchConnection: launchConnectionObject
      launchEdge: launchEdgeObject
      Aggregatelaunch: AggregatelaunchObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      ProductSubscriptionPayload: ProductSubscriptionPayloadObject
      ProductPreviousValues: ProductPreviousValuesObject
      launchSubscriptionPayload: launchSubscriptionPayloadObject
      launchPreviousValues: launchPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Product: ProductFieldDetails
      ProductConnection: ProductConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      ProductEdge: ProductEdgeFieldDetails
      AggregateProduct: AggregateProductFieldDetails
      launch: launchFieldDetails
      launchConnection: launchConnectionFieldDetails
      launchEdge: launchEdgeFieldDetails
      Aggregatelaunch: AggregatelaunchFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      ProductSubscriptionPayload: ProductSubscriptionPayloadFieldDetails
      ProductPreviousValues: ProductPreviousValuesFieldDetails
      launchSubscriptionPayload: launchSubscriptionPayloadFieldDetails
      launchPreviousValues: launchPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      ProductWhereUniqueInput: ProductWhereUniqueInputInputObject
      ProductWhereInput: ProductWhereInputInputObject
      launchWhereUniqueInput: launchWhereUniqueInputInputObject
      launchWhereInput: launchWhereInputInputObject
      ProductCreateInput: ProductCreateInputInputObject
      ProductUpdateInput: ProductUpdateInputInputObject
      ProductUpdateManyMutationInput: ProductUpdateManyMutationInputInputObject
      launchCreateInput: launchCreateInputInputObject
      launchUpdateInput: launchUpdateInputInputObject
      launchUpdateManyMutationInput: launchUpdateManyMutationInputInputObject
      ProductSubscriptionWhereInput: ProductSubscriptionWhereInputInputObject
      launchSubscriptionWhereInput: launchSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ProductOrderByInput: ProductOrderByInputValues,
    launchOrderByInput: launchOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'product', args?: QueryProductArgs[] | false, alias?: string  } 
  | { name: 'products', args?: QueryProductsArgs[] | false, alias?: string  } 
  | { name: 'productsConnection', args?: QueryProductsConnectionArgs[] | false, alias?: string  } 
  | { name: 'launch', args?: QueryLaunchArgs[] | false, alias?: string  } 
  | { name: 'launches', args?: QueryLaunchesArgs[] | false, alias?: string  } 
  | { name: 'launchesConnection', args?: QueryLaunchesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'product'
  | 'products'
  | 'productsConnection'
  | 'launch'
  | 'launches'
  | 'launchesConnection'


type QueryProductArgs =
  | 'where'
type QueryProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLaunchArgs =
  | 'where'
type QueryLaunchesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLaunchesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  product: {
    type: 'Product'
    args: Record<QueryProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  products: {
    type: 'Product'
    args: Record<QueryProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  productsConnection: {
    type: 'ProductConnection'
    args: Record<QueryProductsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductConnection> | prisma.ProductConnection
  }
  launch: {
    type: 'launch'
    args: Record<QueryLaunchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: launchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launch | null> | prisma.launch | null
  }
  launches: {
    type: 'launch'
    args: Record<QueryLaunchesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: launchWhereInput | null, orderBy?: prisma.launchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launch[]> | prisma.launch[]
  }
  launchesConnection: {
    type: 'launchConnection'
    args: Record<QueryLaunchesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: launchWhereInput | null, orderBy?: prisma.launchOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launchConnection> | prisma.launchConnection
  }
}
  

// Types for Product

type ProductObject =
  | ProductFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'color', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 
  | { name: 'imagelink', args?: [] | false, alias?: string  } 

type ProductFields =
  | 'id'
  | 'name'
  | 'price'
  | 'color'
  | 'size'
  | 'imagelink'



  

export interface ProductFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  size: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imagelink: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductConnection

type ProductConnectionObject =
  | ProductConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProductConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProductConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProductEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductEdge[]> | prisma.ProductEdge[]
  }
  aggregate: {
    type: 'AggregateProduct'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProduct> | prisma.AggregateProduct
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ProductEdge

type ProductEdgeObject =
  | ProductEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProductEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProductEdgeFieldDetails {
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProduct

type AggregateProductObject =
  | AggregateProductFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProductFields =
  | 'count'



  

export interface AggregateProductFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for launch

type launchObject =
  | launchFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'mission', args?: [] | false, alias?: string  } 
  | { name: 'details', args?: [] | false, alias?: string  } 
  | { name: 'Imagelink', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 

type launchFields =
  | 'id'
  | 'mission'
  | 'details'
  | 'Imagelink'
  | 'price'



  

export interface launchFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  mission: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  details: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  Imagelink: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for launchConnection

type launchConnectionObject =
  | launchConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type launchConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface launchConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"launchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'launchEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"launchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launchEdge[]> | prisma.launchEdge[]
  }
  aggregate: {
    type: 'Aggregatelaunch'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"launchConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Aggregatelaunch> | prisma.Aggregatelaunch
  }
}
  

// Types for launchEdge

type launchEdgeObject =
  | launchEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type launchEdgeFields =
  | 'node'
  | 'cursor'



  

export interface launchEdgeFieldDetails {
  node: {
    type: 'launch'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"launchEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launch> | prisma.launch
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Aggregatelaunch

type AggregatelaunchObject =
  | AggregatelaunchFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatelaunchFields =
  | 'count'



  

export interface AggregatelaunchFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createProduct', args?: MutationCreateProductArgs[] | false, alias?: string  } 
  | { name: 'updateProduct', args?: MutationUpdateProductArgs[] | false, alias?: string  } 
  | { name: 'updateManyProducts', args?: MutationUpdateManyProductsArgs[] | false, alias?: string  } 
  | { name: 'upsertProduct', args?: MutationUpsertProductArgs[] | false, alias?: string  } 
  | { name: 'deleteProduct', args?: MutationDeleteProductArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProducts', args?: MutationDeleteManyProductsArgs[] | false, alias?: string  } 
  | { name: 'createlaunch', args?: MutationCreatelaunchArgs[] | false, alias?: string  } 
  | { name: 'updatelaunch', args?: MutationUpdatelaunchArgs[] | false, alias?: string  } 
  | { name: 'updateManylaunches', args?: MutationUpdateManylaunchesArgs[] | false, alias?: string  } 
  | { name: 'upsertlaunch', args?: MutationUpsertlaunchArgs[] | false, alias?: string  } 
  | { name: 'deletelaunch', args?: MutationDeletelaunchArgs[] | false, alias?: string  } 
  | { name: 'deleteManylaunches', args?: MutationDeleteManylaunchesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createProduct'
  | 'updateProduct'
  | 'updateManyProducts'
  | 'upsertProduct'
  | 'deleteProduct'
  | 'deleteManyProducts'
  | 'createlaunch'
  | 'updatelaunch'
  | 'updateManylaunches'
  | 'upsertlaunch'
  | 'deletelaunch'
  | 'deleteManylaunches'


type MutationCreateProductArgs =
  | 'data'
type MutationUpdateProductArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProductsArgs =
  | 'data'
  | 'where'
type MutationUpsertProductArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProductArgs =
  | 'where'
type MutationDeleteManyProductsArgs =
  | 'where'
type MutationCreatelaunchArgs =
  | 'data'
type MutationUpdatelaunchArgs =
  | 'data'
  | 'where'
type MutationUpdateManylaunchesArgs =
  | 'data'
  | 'where'
type MutationUpsertlaunchArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletelaunchArgs =
  | 'where'
type MutationDeleteManylaunchesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createProduct: {
    type: 'Product'
    args: Record<MutationCreateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  updateProduct: {
    type: 'Product'
    args: Record<MutationUpdateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateInput, where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updateManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateManyMutationInput, where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProduct: {
    type: 'Product'
    args: Record<MutationUpsertProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput, create: ProductCreateInput, update: ProductUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  deleteProduct: {
    type: 'Product'
    args: Record<MutationDeleteProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  deleteManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createlaunch: {
    type: 'launch'
    args: Record<MutationCreatelaunchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: launchCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launch> | prisma.launch
  }
  updatelaunch: {
    type: 'launch'
    args: Record<MutationUpdatelaunchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: launchUpdateInput, where: launchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launch | null> | prisma.launch | null
  }
  updateManylaunches: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManylaunchesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: launchUpdateManyMutationInput, where?: launchWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertlaunch: {
    type: 'launch'
    args: Record<MutationUpsertlaunchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: launchWhereUniqueInput, create: launchCreateInput, update: launchUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launch> | prisma.launch
  }
  deletelaunch: {
    type: 'launch'
    args: Record<MutationDeletelaunchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: launchWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launch | null> | prisma.launch | null
  }
  deleteManylaunches: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManylaunchesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: launchWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'product', args?: SubscriptionProductArgs[] | false, alias?: string  } 
  | { name: 'launch', args?: SubscriptionLaunchArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'product'
  | 'launch'


type SubscriptionProductArgs =
  | 'where'
type SubscriptionLaunchArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  product: {
    type: 'ProductSubscriptionPayload'
    args: Record<SubscriptionProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProductSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductSubscriptionPayload | null> | prisma.ProductSubscriptionPayload | null
  }
  launch: {
    type: 'launchSubscriptionPayload'
    args: Record<SubscriptionLaunchArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: launchSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launchSubscriptionPayload | null> | prisma.launchSubscriptionPayload | null
  }
}
  

// Types for ProductSubscriptionPayload

type ProductSubscriptionPayloadObject =
  | ProductSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProductSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProductSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProductPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductPreviousValues | null> | prisma.ProductPreviousValues | null
  }
}
  

// Types for ProductPreviousValues

type ProductPreviousValuesObject =
  | ProductPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'color', args?: [] | false, alias?: string  } 
  | { name: 'size', args?: [] | false, alias?: string  } 
  | { name: 'imagelink', args?: [] | false, alias?: string  } 

type ProductPreviousValuesFields =
  | 'id'
  | 'name'
  | 'price'
  | 'color'
  | 'size'
  | 'imagelink'



  

export interface ProductPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  color: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  size: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  imagelink: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for launchSubscriptionPayload

type launchSubscriptionPayloadObject =
  | launchSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type launchSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface launchSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"launchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'launch'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"launchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launch | null> | prisma.launch | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'launchPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"launchSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.launchPreviousValues | null> | prisma.launchPreviousValues | null
  }
}
  

// Types for launchPreviousValues

type launchPreviousValuesObject =
  | launchPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'mission', args?: [] | false, alias?: string  } 
  | { name: 'details', args?: [] | false, alias?: string  } 
  | { name: 'Imagelink', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 

type launchPreviousValuesFields =
  | 'id'
  | 'mission'
  | 'details'
  | 'Imagelink'
  | 'price'



  

export interface launchPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  mission: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  details: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  Imagelink: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface ProductWhereUniqueInput {
  id?: string | null
}
export type ProductWhereUniqueInputInputObject =
  | Extract<keyof ProductWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProductWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  color?: string | null
  color_not?: string | null
  color_in?: string[]
  color_not_in?: string[]
  color_lt?: string | null
  color_lte?: string | null
  color_gt?: string | null
  color_gte?: string | null
  color_contains?: string | null
  color_not_contains?: string | null
  color_starts_with?: string | null
  color_not_starts_with?: string | null
  color_ends_with?: string | null
  color_not_ends_with?: string | null
  size?: string | null
  size_not?: string | null
  size_in?: string[]
  size_not_in?: string[]
  size_lt?: string | null
  size_lte?: string | null
  size_gt?: string | null
  size_gte?: string | null
  size_contains?: string | null
  size_not_contains?: string | null
  size_starts_with?: string | null
  size_not_starts_with?: string | null
  size_ends_with?: string | null
  size_not_ends_with?: string | null
  imagelink?: string | null
  imagelink_not?: string | null
  imagelink_in?: string[]
  imagelink_not_in?: string[]
  imagelink_lt?: string | null
  imagelink_lte?: string | null
  imagelink_gt?: string | null
  imagelink_gte?: string | null
  imagelink_contains?: string | null
  imagelink_not_contains?: string | null
  imagelink_starts_with?: string | null
  imagelink_not_starts_with?: string | null
  imagelink_ends_with?: string | null
  imagelink_not_ends_with?: string | null
  AND?: ProductWhereInput[]
  OR?: ProductWhereInput[]
  NOT?: ProductWhereInput[]
}
export type ProductWhereInputInputObject =
  | Extract<keyof ProductWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'color_not', alias?: string  } 
  | { name: 'color_in', alias?: string  } 
  | { name: 'color_not_in', alias?: string  } 
  | { name: 'color_lt', alias?: string  } 
  | { name: 'color_lte', alias?: string  } 
  | { name: 'color_gt', alias?: string  } 
  | { name: 'color_gte', alias?: string  } 
  | { name: 'color_contains', alias?: string  } 
  | { name: 'color_not_contains', alias?: string  } 
  | { name: 'color_starts_with', alias?: string  } 
  | { name: 'color_not_starts_with', alias?: string  } 
  | { name: 'color_ends_with', alias?: string  } 
  | { name: 'color_not_ends_with', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'size_not', alias?: string  } 
  | { name: 'size_in', alias?: string  } 
  | { name: 'size_not_in', alias?: string  } 
  | { name: 'size_lt', alias?: string  } 
  | { name: 'size_lte', alias?: string  } 
  | { name: 'size_gt', alias?: string  } 
  | { name: 'size_gte', alias?: string  } 
  | { name: 'size_contains', alias?: string  } 
  | { name: 'size_not_contains', alias?: string  } 
  | { name: 'size_starts_with', alias?: string  } 
  | { name: 'size_not_starts_with', alias?: string  } 
  | { name: 'size_ends_with', alias?: string  } 
  | { name: 'size_not_ends_with', alias?: string  } 
  | { name: 'imagelink', alias?: string  } 
  | { name: 'imagelink_not', alias?: string  } 
  | { name: 'imagelink_in', alias?: string  } 
  | { name: 'imagelink_not_in', alias?: string  } 
  | { name: 'imagelink_lt', alias?: string  } 
  | { name: 'imagelink_lte', alias?: string  } 
  | { name: 'imagelink_gt', alias?: string  } 
  | { name: 'imagelink_gte', alias?: string  } 
  | { name: 'imagelink_contains', alias?: string  } 
  | { name: 'imagelink_not_contains', alias?: string  } 
  | { name: 'imagelink_starts_with', alias?: string  } 
  | { name: 'imagelink_not_starts_with', alias?: string  } 
  | { name: 'imagelink_ends_with', alias?: string  } 
  | { name: 'imagelink_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface launchWhereUniqueInput {
  id?: string | null
}
export type launchWhereUniqueInputInputObject =
  | Extract<keyof launchWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface launchWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  mission?: string | null
  mission_not?: string | null
  mission_in?: string[]
  mission_not_in?: string[]
  mission_lt?: string | null
  mission_lte?: string | null
  mission_gt?: string | null
  mission_gte?: string | null
  mission_contains?: string | null
  mission_not_contains?: string | null
  mission_starts_with?: string | null
  mission_not_starts_with?: string | null
  mission_ends_with?: string | null
  mission_not_ends_with?: string | null
  details?: string | null
  details_not?: string | null
  details_in?: string[]
  details_not_in?: string[]
  details_lt?: string | null
  details_lte?: string | null
  details_gt?: string | null
  details_gte?: string | null
  details_contains?: string | null
  details_not_contains?: string | null
  details_starts_with?: string | null
  details_not_starts_with?: string | null
  details_ends_with?: string | null
  details_not_ends_with?: string | null
  Imagelink?: string | null
  Imagelink_not?: string | null
  Imagelink_in?: string[]
  Imagelink_not_in?: string[]
  Imagelink_lt?: string | null
  Imagelink_lte?: string | null
  Imagelink_gt?: string | null
  Imagelink_gte?: string | null
  Imagelink_contains?: string | null
  Imagelink_not_contains?: string | null
  Imagelink_starts_with?: string | null
  Imagelink_not_starts_with?: string | null
  Imagelink_ends_with?: string | null
  Imagelink_not_ends_with?: string | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  AND?: launchWhereInput[]
  OR?: launchWhereInput[]
  NOT?: launchWhereInput[]
}
export type launchWhereInputInputObject =
  | Extract<keyof launchWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'mission', alias?: string  } 
  | { name: 'mission_not', alias?: string  } 
  | { name: 'mission_in', alias?: string  } 
  | { name: 'mission_not_in', alias?: string  } 
  | { name: 'mission_lt', alias?: string  } 
  | { name: 'mission_lte', alias?: string  } 
  | { name: 'mission_gt', alias?: string  } 
  | { name: 'mission_gte', alias?: string  } 
  | { name: 'mission_contains', alias?: string  } 
  | { name: 'mission_not_contains', alias?: string  } 
  | { name: 'mission_starts_with', alias?: string  } 
  | { name: 'mission_not_starts_with', alias?: string  } 
  | { name: 'mission_ends_with', alias?: string  } 
  | { name: 'mission_not_ends_with', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'details_not', alias?: string  } 
  | { name: 'details_in', alias?: string  } 
  | { name: 'details_not_in', alias?: string  } 
  | { name: 'details_lt', alias?: string  } 
  | { name: 'details_lte', alias?: string  } 
  | { name: 'details_gt', alias?: string  } 
  | { name: 'details_gte', alias?: string  } 
  | { name: 'details_contains', alias?: string  } 
  | { name: 'details_not_contains', alias?: string  } 
  | { name: 'details_starts_with', alias?: string  } 
  | { name: 'details_not_starts_with', alias?: string  } 
  | { name: 'details_ends_with', alias?: string  } 
  | { name: 'details_not_ends_with', alias?: string  } 
  | { name: 'Imagelink', alias?: string  } 
  | { name: 'Imagelink_not', alias?: string  } 
  | { name: 'Imagelink_in', alias?: string  } 
  | { name: 'Imagelink_not_in', alias?: string  } 
  | { name: 'Imagelink_lt', alias?: string  } 
  | { name: 'Imagelink_lte', alias?: string  } 
  | { name: 'Imagelink_gt', alias?: string  } 
  | { name: 'Imagelink_gte', alias?: string  } 
  | { name: 'Imagelink_contains', alias?: string  } 
  | { name: 'Imagelink_not_contains', alias?: string  } 
  | { name: 'Imagelink_starts_with', alias?: string  } 
  | { name: 'Imagelink_not_starts_with', alias?: string  } 
  | { name: 'Imagelink_ends_with', alias?: string  } 
  | { name: 'Imagelink_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductCreateInput {
  name?: string
  price?: number | null
  color?: string
  size?: string
  imagelink?: string
}
export type ProductCreateInputInputObject =
  | Extract<keyof ProductCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'imagelink', alias?: string  } 
  
export interface ProductUpdateInput {
  name?: string | null
  price?: number | null
  color?: string | null
  size?: string | null
  imagelink?: string | null
}
export type ProductUpdateInputInputObject =
  | Extract<keyof ProductUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'imagelink', alias?: string  } 
  
export interface ProductUpdateManyMutationInput {
  name?: string | null
  price?: number | null
  color?: string | null
  size?: string | null
  imagelink?: string | null
}
export type ProductUpdateManyMutationInputInputObject =
  | Extract<keyof ProductUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'color', alias?: string  } 
  | { name: 'size', alias?: string  } 
  | { name: 'imagelink', alias?: string  } 
  
export interface launchCreateInput {
  mission?: string
  details?: string
  Imagelink?: string
  price?: number
}
export type launchCreateInputInputObject =
  | Extract<keyof launchCreateInput, string>
  | { name: 'mission', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'Imagelink', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface launchUpdateInput {
  mission?: string | null
  details?: string | null
  Imagelink?: string | null
  price?: number | null
}
export type launchUpdateInputInputObject =
  | Extract<keyof launchUpdateInput, string>
  | { name: 'mission', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'Imagelink', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface launchUpdateManyMutationInput {
  mission?: string | null
  details?: string | null
  Imagelink?: string | null
  price?: number | null
}
export type launchUpdateManyMutationInputInputObject =
  | Extract<keyof launchUpdateManyMutationInput, string>
  | { name: 'mission', alias?: string  } 
  | { name: 'details', alias?: string  } 
  | { name: 'Imagelink', alias?: string  } 
  | { name: 'price', alias?: string  } 
  
export interface ProductSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProductWhereInput | null
  AND?: ProductSubscriptionWhereInput[]
  OR?: ProductSubscriptionWhereInput[]
  NOT?: ProductSubscriptionWhereInput[]
}
export type ProductSubscriptionWhereInputInputObject =
  | Extract<keyof ProductSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface launchSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: launchWhereInput | null
  AND?: launchSubscriptionWhereInput[]
  OR?: launchSubscriptionWhereInput[]
  NOT?: launchSubscriptionWhereInput[]
}
export type launchSubscriptionWhereInputInputObject =
  | Extract<keyof launchSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ProductOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'color_ASC'
  | 'color_DESC'
  | 'size_ASC'
  | 'size_DESC'
  | 'imagelink_ASC'
  | 'imagelink_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type launchOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'mission_ASC'
  | 'mission_DESC'
  | 'details_ASC'
  | 'details_DESC'
  | 'Imagelink_ASC'
  | 'Imagelink_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  